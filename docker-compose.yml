# Версионирование docker-compose
version: '3'
# Указываем сервисы, которые dc должен сбилдить
services:
  frontend:
    build: ./frontend
    container_name: docker-frontend
    command: serve -s build -l 3000
    restart: unless-stopped


  api:
    #Забрать Dockerfile из папки api
    build: ./api
    #Задаем имя контейнеру
    container_name: docker-api
    #Команда, которая выполнится при старте сервиса
    command: npm run start
    #Если вдруг сервер упадет, то пробуем снова запустить контейнер
    restart: unless-stopped
    #Указываем какие порты будут доступны снаружи (слева внешний, справа внутренний)
    ports:
      - "3001:3001"
    environment: 
      - PORT=3001
      - HOST=http://realworld-docker.com
      - MONGO_URL=mongodb://api_db:27017/api
    #Указываем какие сервисы следует запустить до этого
    depends_on:
      - api_db

  auth:
    build: ./auth
    container_name: docker-auth
    command: npm run start
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - HOST=http://realworld-docker.com
      - MONGO_URL=mongodb://auth_db:27017/auth
    depends_on: 
      - auth_db

  api_db:
    image: mongo:latest
    container_name: docker-api-db
    #Хранилище для db вне контейнера
    volumes:
      - mongodb_api:/data/db
    
  auth_db:
    image: mongo:latest
    container_name: docker-auth-db
    #Хранилище для db вне контейнера
    volumes:
      - mongodb_auth:/data/db

  nginx:
    image: nginx:stable-alpine
    container_name: docker-nginx
    ports:
      - "80:80"
    volumes:
      #Берем из nginx/conf.prod и кладем в etc/nginx/conf.d/nginx.conf
      - ./nginx/nginx.conf.prod:/etc/nginx/conf.d/nginx.conf
    depends_on: 
      - frontend

#Написанный здесь volume позволяет использовать его в любом сервисе
volumes:
  mongodb_api:
  mongodb_auth: